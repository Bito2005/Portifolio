package util;

import domain.*;
import persistence.GerenciadorArquivos;

import javax.swing.*;
import java.awt.*;
import java.io.File;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;
import java.math.BigDecimal;

/**
 * Classe utilitária para geração de gráficos
 * Versão simplificada com gráficos básicos em Swing
 * TODO: Integrar com JFreeChart quando a biblioteca estiver disponível
 */
public class Graficos {
    
    private static final String DIRETORIO_EXPORT = "export";
    private static final DateTimeFormatter FORMATO_ARQUIVO = DateTimeFormatter.ofPattern("yyyyMMdd_HHmmss");
    
    // Cores do sistema para gráficos
    private static final Color COR_PRINCIPAL = new Color(31, 78, 121); // Azul escuro
    private static final Color COR_SECUNDARIA = new Color(76, 175, 80); // Verde
    private static final Color COR_TERCIARIA = new Color(220, 230, 241); // Azul claro
    private static final Color[] CORES_GRAFICOS = {
        COR_PRINCIPAL, COR_SECUNDARIA, COR_TERCIARIA,
        new Color(255, 152, 0), new Color(244, 67, 54), new Color(156, 39, 176)
    };
    
    /**
     * Cria gráfico de pizza simples com status dos veículos
     */
    public static JPanel criarGraficoPizzaStatusVeiculos() {
        try {
            GerenciadorArquivos<Veiculo> gerenciador = new GerenciadorArquivos<>("veiculos.json", Veiculo.class);
            List<Veiculo> veiculos = gerenciador.carregar();
            
            // Contar veículos por status
            Map<Veiculo.Status, Long> contagemStatus = veiculos.stream()
                .collect(Collectors.groupingBy(Veiculo::getStatus, Collectors.counting()));
            
            return new GraficoPizzaPanel("Status dos Veículos", contagemStatus);
            
        } catch (Exception e) {
            e.printStackTrace();
            return criarPainelErro("Erro ao gerar gráfico de status dos veículos: " + e.getMessage());
        }
    }
    
    /**
     * Cria gráfico de barras simples com veículos por categoria
     */
    public static JPanel criarGraficoBarrasVeiculosPorCategoria() {
        try {
            GerenciadorArquivos<Veiculo> gerenciador = new GerenciadorArquivos<>("veiculos.json", Veiculo.class);
            List<Veiculo> veiculos = gerenciador.carregar();
            
            // Contar veículos por categoria
            Map<Veiculo.Categoria, Long> contagemCategoria = veiculos.stream()
                .collect(Collectors.groupingBy(Veiculo::getCategoria, Collectors.counting()));
            
            return new GraficoBarrasPanel("Veículos por Categoria", contagemCategoria);
            
        } catch (Exception e) {
            e.printStackTrace();
            return criarPainelErro("Erro ao gerar gráfico de veículos por categoria: " + e.getMessage());
        }
    }
    
    /**
     * Cria gráfico de barras com aluguéis por mês
     */
    public static JPanel criarGraficoBarrasAluguelsPorMes() {
        try {
            GerenciadorArquivos<Aluguel> gerenciador = new GerenciadorArquivos<>("alugueis.json", Aluguel.class);
            List<Aluguel> alugueis = gerenciador.carregar();
            
            // Filtrar aluguéis dos últimos 6 meses e contar por mês
            LocalDate seiseMesesAtras = LocalDate.now().minusMonths(6);
            Map<String, Long> aluguelsPorMes = alugueis.stream()
                .filter(a -> a.getDataInicio().isAfter(seiseMesesAtras))
                .collect(Collectors.groupingBy(
                    a -> a.getDataInicio().getMonth().name().substring(0, 3) + "/" + 
                         String.valueOf(a.getDataInicio().getYear()).substring(2),
                    Collectors.counting()
                ));
            
            return new GraficoBarrasPanel("Aluguéis por Mês (Últimos 6 meses)", aluguelsPorMes);
            
        } catch (Exception e) {
            e.printStackTrace();
            return criarPainelErro("Erro ao gerar gráfico de aluguéis por mês: " + e.getMessage());
        }
    }
    
    /**
     * Cria gráfico de pizza com receita por categoria de veículo
     */
    public static JPanel criarGraficoPizzaReceitaPorCategoria() {
        try {
            GerenciadorArquivos<Aluguel> gerenciadorAlugueis = new GerenciadorArquivos<>("alugueis.json", Aluguel.class);
            GerenciadorArquivos<Veiculo> gerenciadorVeiculos = new GerenciadorArquivos<>("veiculos.json", Veiculo.class);
            
            List<Aluguel> alugueis = gerenciadorAlugueis.carregar();
            List<Veiculo> veiculos = gerenciadorVeiculos.carregar();
            
            // Mapear receita por categoria
            Map<Veiculo.Categoria, BigDecimal> receitaPorCategoria = alugueis.stream()
                .filter(a -> a.getStatus() == Aluguel.StatusAluguel.FINALIZADO)
                .collect(Collectors.groupingBy(
                    a -> {
                        // Encontrar categoria do veículo
                        return veiculos.stream()
                            .filter(v -> v.getId().equals(a.getVeiculoId()))
                            .map(Veiculo::getCategoria)
                            .findFirst()
                            .orElse(Veiculo.Categoria.ECONOMICO);
                    },
                    Collectors.reducing(
                        BigDecimal.ZERO,
                        Aluguel::getValorTotal,
                        BigDecimal::add
                    )
                ));
            
            return new GraficoPizzaPanel("Receita por Categoria", receitaPorCategoria);
            
        } catch (Exception e) {
            e.printStackTrace();
            return criarPainelErro("Erro ao gerar gráfico de receita por categoria: " + e.getMessage());
        }
    }
    
    /**
     * Classe interna para exibir gráfico de pizza simples
     */
    private static class GraficoPizzaPanel extends JPanel {
        
        private final String titulo;
        private final Map<?, ?> dados;
        
        public GraficoPizzaPanel(String titulo, Map<?, ?> dados) {
            this.titulo = titulo;
            this.dados = dados;
            setPreferredSize(new Dimension(400, 300));
            setBorder(BorderFactory.createEtchedBorder());
        }
        
        @Override
        protected void paintComponent(Graphics g) {
            super.paintComponent(g);
            
            Graphics2D g2d = (Graphics2D) g;
            g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
            
            int largura = getWidth();
            int altura = getHeight();
            
            // Desenhar título
            g2d.setColor(Color.BLACK);
            g2d.setFont(new Font("Arial", Font.BOLD, 14));
            FontMetrics fm = g2d.getFontMetrics();
            int larguraTexto = fm.stringWidth(titulo);
            g2d.drawString(titulo, (largura - larguraTexto) / 2, 20);
            
            // Verificar se há dados
            if (dados.isEmpty()) {
                g2d.drawString("Sem dados disponíveis", (largura - fm.stringWidth("Sem dados disponíveis")) / 2, altura / 2);
                return;
            }
            
            // Calcular total
            double total = dados.values().stream()
                .mapToDouble(value -> {
                    if (value instanceof Number) {
                        return ((Number) value).doubleValue();
                    }
                    return 0;
                })
                .sum();
            
            // Desenhar pizza
            int raio = Math.min(largura, altura) / 3;
            int centroX = largura / 2;
            int centroY = altura / 2;
            
            double anguloInicial = 0;
            int colorIndex = 0;
            
            // Desenhar setores
            for (Map.Entry<?, ?> entry : dados.entrySet()) {
                double valor;
                if (entry.getValue() instanceof Number) {
                    valor = ((Number) entry.getValue()).doubleValue();
                } else {
                    continue;
                }
                
                double angulo = 360.0 * (valor / total);
                
                g2d.setColor(CORES_GRAFICOS[colorIndex % CORES_GRAFICOS.length]);
                g2d.fillArc(centroX - raio, centroY - raio, raio * 2, raio * 2, 
                           (int) anguloInicial, (int) angulo);
                
                g2d.setColor(Color.BLACK);
                g2d.drawArc(centroX - raio, centroY - raio, raio * 2, raio * 2, 
                           (int) anguloInicial, (int) angulo);
                
                // Desenhar legenda
                String legenda = entry.getKey().toString() + ": " + entry.getValue();
                g2d.setFont(new Font("Arial", Font.PLAIN, 10));
                
                int xLegenda = 30;
                int yLegenda = altura - 100 + (colorIndex * 15);
                
                g2d.setColor(CORES_GRAFICOS[colorIndex % CORES_GRAFICOS.length]);
                g2d.fillRect(xLegenda, yLegenda, 10, 10);
                g2d.setColor(Color.BLACK);
                g2d.drawRect(xLegenda, yLegenda, 10, 10);
                g2d.drawString(legenda, xLegenda + 15, yLegenda + 9);
                
                anguloInicial += angulo;
                colorIndex++;
            }
        }
    }
    
    /**
     * Classe interna para exibir gráfico de barras simples
     */
    private static class GraficoBarrasPanel extends JPanel {
        
        private final String titulo;
        private final Map<?, ?> dados;
        
        public GraficoBarrasPanel(String titulo, Map<?, ?> dados) {
            this.titulo = titulo;
            this.dados = dados;
            setPreferredSize(new Dimension(400, 300));
            setBorder(BorderFactory.createEtchedBorder());
        }
        
        @Override
        protected void paintComponent(Graphics g) {
            super.paintComponent(g);
            
            Graphics2D g2d = (Graphics2D) g;
            g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
            
            int largura = getWidth();
            int altura = getHeight();
            
            // Desenhar título
            g2d.setColor(Color.BLACK);
            g2d.setFont(new Font("Arial", Font.BOLD, 14));
            FontMetrics fm = g2d.getFontMetrics();
            int larguraTexto = fm.stringWidth(titulo);
            g2d.drawString(titulo, (largura - larguraTexto) / 2, 20);
            
            // Verificar se há dados
            if (dados.isEmpty()) {
                g2d.drawString("Sem dados disponíveis", (largura - fm.stringWidth("Sem dados disponíveis")) / 2, altura / 2);
                return;
            }
            
            // Definir dimensões do gráfico
            int margem = 40;
            int alturaGrafico = altura - 2 * margem;
            
            // Encontrar valor máximo
            double maxValor = dados.values().stream()
                .mapToDouble(value -> {
                    if (value instanceof Number) {
                        return ((Number) value).doubleValue();
                    }
                    return 0;
                })
                .max()
                .orElse(0);
            
            // Ajustar para valor mínimo de 1
            maxValor = Math.max(1, maxValor);
            
            // Desenhar eixos
            g2d.setColor(Color.BLACK);
            g2d.drawLine(margem, margem, margem, margem + alturaGrafico);
            g2d.drawLine(margem, margem + alturaGrafico, largura - margem, margem + alturaGrafico);
            
            // Calcular largura das barras
            int larguraBarra = (largura - 2 * margem) / (dados.size() * 2);
            larguraBarra = Math.min(larguraBarra, 40); // Limitar largura máxima
            
            // Desenhar barras
            int x = margem + 5;
            int colorIndex = 0;
            
            for (Map.Entry<?, ?> entry : dados.entrySet()) {
                int alturaBarra = (int) ((double) entry.getValue() / maxValor * alturaGrafico);
                int y = margem + alturaGrafico - alturaBarra;
                
                g2d.setColor(CORES_GRAFICOS[colorIndex % CORES_GRAFICOS.length]);
                g2d.fillRect(x, y, larguraBarra, alturaBarra);
                
                // Borda da barra
                g2d.setColor(Color.BLACK);
                g2d.drawRect(x, y, larguraBarra, alturaBarra);
                
                // Label da categoria
                g2d.setFont(new Font("Arial", Font.PLAIN, 9));
                String label = entry.getKey().toString();
                if (label.length() > 8) label = label.substring(0, 8) + "...";
                g2d.drawString(label, x, margem + alturaGrafico + 15);
                
                // Valor
                g2d.drawString(entry.getValue().toString(), x + 2, y - 5);
                
                x += larguraBarra + 10;
                colorIndex++;
            }
        }
    }
    
    /**
     * Cria painel de dashboard com múltiplos gráficos
     */
    public static JPanel criarDashboard() {
        JPanel dashboard = new JPanel(new GridLayout(2, 2, 10, 10));
        dashboard.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));
        
        // Adicionar gráficos
        dashboard.add(criarGraficoPizzaStatusVeiculos());
        dashboard.add(criarGraficoBarrasVeiculosPorCategoria());
        dashboard.add(criarGraficoBarrasAluguelsPorMes());
        dashboard.add(criarGraficoPizzaReceitaPorCategoria());
        
        return dashboard;
    }
    
    /**
     * Cria painel de erro quando não é possível gerar o gráfico
     */
    private static JPanel criarPainelErro(String mensagem) {
        JPanel panel = new JPanel(new BorderLayout());
        panel.setBackground(Color.WHITE);
        panel.setBorder(BorderFactory.createLineBorder(Color.RED, 2));
        
        JLabel labelErro = new JLabel("<html><center>" + mensagem + "</center></html>");
        labelErro.setForeground(Color.RED);
        labelErro.setFont(new Font("Arial", Font.PLAIN, 12));
        labelErro.setHorizontalAlignment(SwingConstants.CENTER);
        
        panel.add(labelErro, BorderLayout.CENTER);
        
        return panel;
    }
    
    /**
     * Método para testar os gráficos em uma janela separada
     */
    public static void mostrarJanelaGraficos() {
        SwingUtilities.invokeLater(() -> {
            JFrame frame = new JFrame("AutoFácil - Gráficos e Relatórios");
            frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
            frame.setSize(1000, 700);
            frame.setLocationRelativeTo(null);
            
            JTabbedPane tabbedPane = new JTabbedPane();
            
            // Aba Dashboard
            tabbedPane.addTab("Dashboard", criarDashboard());
            
            // Abas individuais
            tabbedPane.addTab("Status Veículos", criarGraficoPizzaStatusVeiculos());
            tabbedPane.addTab("Veículos por Categoria", criarGraficoBarrasVeiculosPorCategoria());
            tabbedPane.addTab("Aluguéis por Mês", criarGraficoBarrasAluguelsPorMes());
            tabbedPane.addTab("Receita por Categoria", criarGraficoPizzaReceitaPorCategoria());
            
            frame.add(tabbedPane);
            frame.setVisible(true);
        });
    }
}

import javax.swing.*;
import java.awt.*;
import java.io.File;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;
import java.math.BigDecimal;

/**
 * Classe utilitária para geração de gráficos
 * Versão simplificada com gráficos básicos em Swing
 * TODO: Integrar com JFreeChart quando a biblioteca estiver disponível
 */
public class Graficos {
    
    private static final String DIRETORIO_EXPORT = "export";
    private static final DateTimeFormatter FORMATO_ARQUIVO = DateTimeFormatter.ofPattern("yyyyMMdd_HHmmss");
    
    // Cores do sistema para gráficos
    private static final Color COR_PRINCIPAL = new Color(31, 78, 121); // Azul escuro
    private static final Color COR_SECUNDARIA = new Color(76, 175, 80); // Verde
    private static final Color COR_TERCIARIA = new Color(220, 230, 241); // Azul claro
    private static final Color[] CORES_GRAFICOS = {
        COR_PRINCIPAL, COR_SECUNDARIA, COR_TERCIARIA,
        new Color(255, 152, 0), new Color(244, 67, 54), new Color(156, 39, 176)
    };
    
    /**
     * Cria gráfico de pizza simples com status dos veículos
     */
    public static JPanel criarGraficoPizzaStatusVeiculos() {
        try {
            GerenciadorArquivos<Veiculo> gerenciador = new GerenciadorArquivos<>("veiculos.json", Veiculo.class);
            List<Veiculo> veiculos = gerenciador.carregar();
            
            // Contar veículos por status
            Map<Veiculo.Status, Long> contagemStatus = veiculos.stream()
                .collect(Collectors.groupingBy(Veiculo::getStatus, Collectors.counting()));
            
            return new GraficoPizzaPanel("Status dos Veículos", contagemStatus);
            
        } catch (Exception e) {
            e.printStackTrace();
            return criarPainelErro("Erro ao gerar gráfico de status dos veículos: " + e.getMessage());
        }
    }
    
    /**
     * Cria gráfico de barras simples com veículos por categoria
     */
    public static JPanel criarGraficoBarrasVeiculosPorCategoria() {
        try {
            GerenciadorArquivos<Veiculo> gerenciador = new GerenciadorArquivos<>("veiculos.json", Veiculo.class);
            List<Veiculo> veiculos = gerenciador.carregar();
            
            // Contar veículos por categoria
            Map<Veiculo.Categoria, Long> contagemCategoria = veiculos.stream()
                .collect(Collectors.groupingBy(Veiculo::getCategoria, Collectors.counting()));
            
            return new GraficoBarrasPanel("Veículos por Categoria", contagemCategoria);
            
        } catch (Exception e) {
            e.printStackTrace();
            return criarPainelErro("Erro ao gerar gráfico de veículos por categoria: " + e.getMessage());
        }
    }
    
    /**
     * Cria gráfico de barras com aluguéis por mês
     */
    public static JPanel criarGraficoBarrasAluguelsPorMes() {
        try {
            GerenciadorArquivos<Aluguel> gerenciador = new GerenciadorArquivos<>("alugueis.json", Aluguel.class);
            List<Aluguel> alugueis = gerenciador.carregar();
            
            // Filtrar aluguéis dos últimos 6 meses e contar por mês
            LocalDate seiseMesesAtras = LocalDate.now().minusMonths(6);
            Map<String, Long> aluguelsPorMes = alugueis.stream()
                .filter(a -> a.getDataInicio().isAfter(seiseMesesAtras))
                .collect(Collectors.groupingBy(
                    a -> a.getDataInicio().getMonth().name().substring(0, 3) + "/" + 
                         String.valueOf(a.getDataInicio().getYear()).substring(2),
                    Collectors.counting()
                ));
            
            return new GraficoBarrasPanel("Aluguéis por Mês (Últimos 6 meses)", aluguelsPorMes);
            
        } catch (Exception e) {
            e.printStackTrace();
            return criarPainelErro("Erro ao gerar gráfico de aluguéis por mês: " + e.getMessage());
        }
    }
    
    /**
     * Cria painel de dashboard com múltiplos gráficos
     */
    public static JPanel criarDashboard() {
        JPanel dashboard = new JPanel(new GridLayout(2, 2, 10, 10));
        dashboard.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));
        dashboard.setBackground(Color.WHITE);
        
        // Adicionar gráficos
        dashboard.add(criarGraficoPizzaStatusVeiculos());
        dashboard.add(criarGraficoBarrasVeiculosPorCategoria());
        dashboard.add(criarGraficoBarrasAluguelsPorMes());
        dashboard.add(criarPainelEstatisticas());
        
        return dashboard;
    }
    
    /**
     * Cria painel com estatísticas gerais
     */
    public static JPanel criarPainelEstatisticas() {
        try {
            GerenciadorArquivos<Cliente> gerClientes = new GerenciadorArquivos<>("clientes.json", Cliente.class);
            GerenciadorArquivos<Veiculo> gerVeiculos = new GerenciadorArquivos<>("veiculos.json", Veiculo.class);
            GerenciadorArquivos<Aluguel> gerAlugueis = new GerenciadorArquivos<>("alugueis.json", Aluguel.class);
            
            List<Cliente> clientes = gerClientes.carregar();
            List<Veiculo> veiculos = gerVeiculos.carregar();
            List<Aluguel> alugueis = gerAlugueis.carregar();
            
            JPanel panel = new JPanel(new GridLayout(4, 1, 5, 5));
            panel.setBorder(BorderFactory.createTitledBorder("Estatísticas Gerais"));
            panel.setBackground(Color.WHITE);
            
            // Total de clientes
            JLabel labelClientes = new JLabel("Total de Clientes: " + clientes.size());
            labelClientes.setFont(new Font("Arial", Font.BOLD, 14));
            labelClientes.setForeground(COR_PRINCIPAL);
            panel.add(labelClientes);
            
            // Total de veículos
            JLabel labelVeiculos = new JLabel("Total de Veículos: " + veiculos.size());
            labelVeiculos.setFont(new Font("Arial", Font.BOLD, 14));
            labelVeiculos.setForeground(COR_PRINCIPAL);
            panel.add(labelVeiculos);
            
            // Veículos disponíveis
            long disponiveis = veiculos.stream().filter(v -> v.getStatus() == Veiculo.Status.DISPONIVEL).count();
            JLabel labelDisponiveis = new JLabel("Veículos Disponíveis: " + disponiveis);
            labelDisponiveis.setFont(new Font("Arial", Font.BOLD, 14));
            labelDisponiveis.setForeground(COR_SECUNDARIA);
            panel.add(labelDisponiveis);
            
            // Total de aluguéis
            JLabel labelAlugueis = new JLabel("Total de Aluguéis: " + alugueis.size());
            labelAlugueis.setFont(new Font("Arial", Font.BOLD, 14));
            labelAlugueis.setForeground(COR_PRINCIPAL);
            panel.add(labelAlugueis);
            
            return panel;
            
        } catch (Exception e) {
            e.printStackTrace();
            return criarPainelErro("Erro ao gerar estatísticas: " + e.getMessage());
        }
    }
    
    /**
     * Cria painel de erro quando não é possível gerar o gráfico
     */
    private static JPanel criarPainelErro(String mensagem) {
        JPanel panel = new JPanel(new BorderLayout());
        panel.setBackground(Color.WHITE);
        panel.setBorder(BorderFactory.createLineBorder(Color.RED, 2));
        
        JLabel labelErro = new JLabel("<html><center>" + mensagem + "</center></html>");
        labelErro.setForeground(Color.RED);
        labelErro.setFont(new Font("Arial", Font.PLAIN, 12));
        labelErro.setHorizontalAlignment(SwingConstants.CENTER);
        
        panel.add(labelErro, BorderLayout.CENTER);
        
        return panel;
    }
    
    /**
     * Painel customizado para gráfico de pizza simples
     */
    private static class GraficoPizzaPanel extends JPanel {
        private String titulo;
        private Map<?, Long> dados;
        
        public GraficoPizzaPanel(String titulo, Map<?, Long> dados) {
            this.titulo = titulo;
            this.dados = dados;
            setBackground(Color.WHITE);
            setBorder(BorderFactory.createTitledBorder(titulo));
            setPreferredSize(new Dimension(300, 200));
        }
        
        @Override
        protected void paintComponent(Graphics g) {
            super.paintComponent(g);
            Graphics2D g2d = (Graphics2D) g;
            g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
            
            if (dados.isEmpty()) {
                g2d.setColor(Color.GRAY);
                g2d.drawString("Sem dados disponíveis", getWidth()/2 - 50, getHeight()/2);
                return;
            }
            
            // Calcular total
            long total = dados.values().stream().mapToLong(Long::longValue).sum();
            
            // Desenhar pizza
            int centerX = getWidth() / 2;
            int centerY = getHeight() / 2 - 10;
            int radius = Math.min(getWidth(), getHeight()) / 4;
            
            double currentAngle = 0;
            int colorIndex = 0;
            
            for (Map.Entry<?, Long> entry : dados.entrySet()) {
                double percentage = (double) entry.getValue() / total;
                double arcAngle = percentage * 360;
                
                g2d.setColor(CORES_GRAFICOS[colorIndex % CORES_GRAFICOS.length]);
                g2d.fillArc(centerX - radius, centerY - radius, radius * 2, radius * 2,
                          (int) currentAngle, (int) arcAngle);
                
                // Desenhar borda
                g2d.setColor(Color.WHITE);
                g2d.setStroke(new BasicStroke(2));
                g2d.drawArc(centerX - radius, centerY - radius, radius * 2, radius * 2,
                          (int) currentAngle, (int) arcAngle);
                
                currentAngle += arcAngle;
                colorIndex++;
            }
            
            // Desenhar legenda
            int legendaY = centerY + radius + 20;
            colorIndex = 0;
            for (Map.Entry<?, Long> entry : dados.entrySet()) {
                g2d.setColor(CORES_GRAFICOS[colorIndex % CORES_GRAFICOS.length]);
                g2d.fillRect(10, legendaY, 15, 15);
                
                g2d.setColor(Color.BLACK);
                g2d.setFont(new Font("Arial", Font.PLAIN, 10));
                String texto = entry.getKey().toString() + ": " + entry.getValue();
                g2d.drawString(texto, 30, legendaY + 12);
                
                legendaY += 20;
                colorIndex++;
            }
        }
    }
    
    /**
     * Painel customizado para gráfico de barras simples
     */
    private static class GraficoBarrasPanel extends JPanel {
        private String titulo;
        private Map<?, Long> dados;
        
        public GraficoBarrasPanel(String titulo, Map<?, Long> dados) {
            this.titulo = titulo;
            this.dados = dados;
            setBackground(Color.WHITE);
            setBorder(BorderFactory.createTitledBorder(titulo));
            setPreferredSize(new Dimension(300, 200));
        }
        
        @Override
        protected void paintComponent(Graphics g) {
            super.paintComponent(g);
            Graphics2D g2d = (Graphics2D) g;
            g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
            
            if (dados.isEmpty()) {
                g2d.setColor(Color.GRAY);
                g2d.drawString("Sem dados disponíveis", getWidth()/2 - 50, getHeight()/2);
                return;
            }
            
            // Calcular dimensões
            int margem = 40;
            int larguraGrafico = getWidth() - 2 * margem;
            int alturaGrafico = getHeight() - 2 * margem - 20;
            
            long maxValor = dados.values().stream().mapToLong(Long::longValue).max().orElse(1);
            int numBarras = dados.size();
            int larguraBarra = larguraGrafico / numBarras - 10;
            
            // Desenhar eixos
            g2d.setColor(Color.BLACK);
            g2d.drawLine(margem, margem, margem, margem + alturaGrafico);
            g2d.drawLine(margem, margem + alturaGrafico, margem + larguraGrafico, margem + alturaGrafico);
            
            // Desenhar barras
            int x = margem + 5;
            int colorIndex = 0;
            
            for (Map.Entry<?, Long> entry : dados.entrySet()) {
                int alturaBarra = (int) ((double) entry.getValue() / maxValor * alturaGrafico);
                int y = margem + alturaGrafico - alturaBarra;
                
                g2d.setColor(CORES_GRAFICOS[colorIndex % CORES_GRAFICOS.length]);
                g2d.fillRect(x, y, larguraBarra, alturaBarra);
                
                // Borda da barra
                g2d.setColor(Color.BLACK);
                g2d.drawRect(x, y, larguraBarra, alturaBarra);
                
                // Label da categoria
                g2d.setFont(new Font("Arial", Font.PLAIN, 9));
                String label = entry.getKey().toString();
                if (label.length() > 8) label = label.substring(0, 8) + "...";
                g2d.drawString(label, x, margem + alturaGrafico + 15);
                
                // Valor
                g2d.drawString(entry.getValue().toString(), x + 2, y - 5);
                
                x += larguraBarra + 10;
                colorIndex++;
            }
        }
    }
    
    /**
     * Método para testar os gráficos em uma janela separada
     */
    public static void mostrarJanelaGraficos() {
        SwingUtilities.invokeLater(() -> {
            JFrame frame = new JFrame("AutoFácil - Gráficos e Relatórios");
            frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
            frame.setSize(1000, 700);
            frame.setLocationRelativeTo(null);
            
            JTabbedPane tabbedPane = new JTabbedPane();
            
            // Aba Dashboard
            tabbedPane.addTab("Dashboard", criarDashboard());
            
            frame.add(tabbedPane);
            frame.setVisible(true);
        });
    }
    
    /* 
     * Código comentado para futura implementação com JFreeChart
     * Será implementado quando a biblioteca estiver configurada corretamente
    */
        try {
            GerenciadorArquivos<Veiculo> gerenciador = new GerenciadorArquivos<>("veiculos.json", Veiculo.class);
            List<Veiculo> veiculos = gerenciador.carregar();
            
            // Contar veículos por categoria
            Map<Veiculo.Categoria, Long> contagemCategoria = veiculos.stream()
                .collect(Collectors.groupingBy(Veiculo::getCategoria, Collectors.counting()));
            
            // Criar dataset
            DefaultCategoryDataset dataset = new DefaultCategoryDataset();
            for (Map.Entry<Veiculo.Categoria, Long> entry : contagemCategoria.entrySet()) {
                dataset.addValue(entry.getValue(), "Quantidade", entry.getKey().getDescricao());
            }
            
            // Criar gráfico
            JFreeChart chart = ChartFactory.createBarChart(
                "Veículos por Categoria",
                "Categoria",
                "Quantidade",
                dataset,
                PlotOrientation.VERTICAL,
                true, // legenda
                true, // tooltips
                false // URLs
            );
            
            // Personalizar aparência
            personalizarGrafico(chart);
            
            return new ChartPanel(chart);
            
        } catch (Exception e) {
            e.printStackTrace();
            return criarPainelErro("Erro ao gerar gráfico de veículos por categoria: " + e.getMessage());
        }
    }
    
    /**
     * Gera gráfico de barras com aluguéis por mês
     */
    public static JPanel criarGraficoBarrasAluguelsPorMes() {
        try {
            GerenciadorArquivos<Aluguel> gerenciador = new GerenciadorArquivos<>("alugueis.json", Aluguel.class);
            List<Aluguel> alugueis = gerenciador.carregar();
            
            // Filtrar aluguéis do último ano
            LocalDate umAnoAtras = LocalDate.now().minusYears(1);
            Map<String, Long> aluguelsPorMes = alugueis.stream()
                .filter(a -> a.getDataInicio().isAfter(umAnoAtras))
                .collect(Collectors.groupingBy(
                    a -> a.getDataInicio().getMonth().name() + "/" + a.getDataInicio().getYear(),
                    Collectors.counting()
                ));
            
            // Criar dataset
            DefaultCategoryDataset dataset = new DefaultCategoryDataset();
            for (Map.Entry<String, Long> entry : aluguelsPorMes.entrySet()) {
                dataset.addValue(entry.getValue(), "Aluguéis", entry.getKey());
            }
            
            // Criar gráfico
            JFreeChart chart = ChartFactory.createBarChart(
                "Aluguéis por Mês (Último Ano)",
                "Mês/Ano",
                "Quantidade de Aluguéis",
                dataset,
                PlotOrientation.VERTICAL,
                true, // legenda
                true, // tooltips
                false // URLs
            );
            
            // Personalizar aparência
            personalizarGrafico(chart);
            
            return new ChartPanel(chart);
            
        } catch (Exception e) {
            e.printStackTrace();
            return criarPainelErro("Erro ao gerar gráfico de aluguéis por mês: " + e.getMessage());
        }
    }
    
    /**
     * Gera gráfico de pizza com receita por categoria de veículo
     */
    public static JPanel criarGraficoPizzaReceitaPorCategoria() {
        try {
            GerenciadorArquivos<Aluguel> gerenciadorAlugueis = new GerenciadorArquivos<>("alugueis.json", Aluguel.class);
            GerenciadorArquivos<Veiculo> gerenciadorVeiculos = new GerenciadorArquivos<>("veiculos.json", Veiculo.class);
            
            List<Aluguel> alugueis = gerenciadorAlugueis.carregar();
            List<Veiculo> veiculos = gerenciadorVeiculos.carregar();
            
            // Mapear receita por categoria
            Map<Veiculo.Categoria, BigDecimal> receitaPorCategoria = alugueis.stream()
                .filter(a -> a.getStatus() == Aluguel.StatusAluguel.FINALIZADO)
                .collect(Collectors.groupingBy(
                    a -> {
                        // Encontrar categoria do veículo
                        return veiculos.stream()
                            .filter(v -> v.getId().equals(a.getVeiculoId()))
                            .map(Veiculo::getCategoria)
                            .findFirst()
                            .orElse(Veiculo.Categoria.ECONOMICO);
                    },
                    Collectors.reducing(
                        BigDecimal.ZERO,
                        Aluguel::getValorTotal,
                        BigDecimal::add
                    )
                ));
            
            // Criar dataset
            DefaultPieDataset<String> dataset = new DefaultPieDataset<>();
            for (Map.Entry<Veiculo.Categoria, BigDecimal> entry : receitaPorCategoria.entrySet()) {
                dataset.setValue(entry.getKey().getDescricao(), entry.getValue().doubleValue());
            }
            
            // Criar gráfico
            JFreeChart chart = ChartFactory.createPieChart(
                "Receita por Categoria de Veículo",
                dataset,
                true, // legenda
                true, // tooltips
                false // URLs
            );
            
            // Personalizar aparência
            personalizarGrafico(chart);
            
            return new ChartPanel(chart);
            
        } catch (Exception e) {
            e.printStackTrace();
            return criarPainelErro("Erro ao gerar gráfico de receita por categoria: " + e.getMessage());
        }
    }
    
    /**
     * Salva um gráfico como imagem PNG
     */
    public static String salvarGraficoComoPNG(JFreeChart chart, String nomeBase, int largura, int altura) {
        try {
            // Garantir que o diretório existe
            File dir = new File(DIRETORIO_EXPORT);
            if (!dir.exists()) {
                dir.mkdirs();
            }
            
            String nomeArquivo = nomeBase + "_" + LocalDate.now().format(FORMATO_ARQUIVO) + ".png";
            String caminhoCompleto = DIRETORIO_EXPORT + "/" + nomeArquivo;
            File arquivo = new File(caminhoCompleto);
            
            ChartUtils.saveChartAsPNG(arquivo, chart, largura, altura);
            
            return caminhoCompleto;
            
        } catch (IOException e) {
            e.printStackTrace();
            throw new RuntimeException("Erro ao salvar gráfico: " + e.getMessage());
        }
    }
    
    /**
     * Cria painel de dashboard com múltiplos gráficos
     */
    public static JPanel criarDashboard() {
        JPanel dashboard = new JPanel(new GridLayout(2, 2, 10, 10));
        dashboard.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));
        
        // Adicionar gráficos
        dashboard.add(criarGraficoPizzaStatusVeiculos());
        dashboard.add(criarGraficoBarrasVeiculosPorCategoria());
        dashboard.add(criarGraficoBarrasAluguelsPorMes());
        dashboard.add(criarGraficoPizzaReceitaPorCategoria());
        
        return dashboard;
    }
    
    /**
     * Personaliza a aparência do gráfico
     */
    private static void personalizarGrafico(JFreeChart chart) {
        // Configurar fundo
        chart.setBackgroundPaint(Color.WHITE);
        
        // Configurar título
        chart.getTitle().setFont(new Font("Arial", Font.BOLD, 16));
        chart.getTitle().setPaint(COR_PRINCIPAL);
        
        // Configurar legenda
        if (chart.getLegend() != null) {
            chart.getLegend().setBackgroundPaint(Color.WHITE);
            chart.getLegend().setItemFont(new Font("Arial", Font.PLAIN, 12));
        }
    }
    
    /**
     * Cria painel de erro quando não é possível gerar o gráfico
     */
    private static JPanel criarPainelErro(String mensagem) {
        JPanel panel = new JPanel(new BorderLayout());
        panel.setBackground(Color.WHITE);
        panel.setBorder(BorderFactory.createLineBorder(Color.RED, 2));
        
        JLabel labelErro = new JLabel("<html><center>" + mensagem + "</center></html>");
        labelErro.setForeground(Color.RED);
        labelErro.setFont(new Font("Arial", Font.PLAIN, 12));
        labelErro.setHorizontalAlignment(SwingConstants.CENTER);
        
        panel.add(labelErro, BorderLayout.CENTER);
        
        return panel;
    }
    
    /**
     * Método para testar os gráficos em uma janela separada
     */
    public static void mostrarJanelaGraficos() {
        SwingUtilities.invokeLater(() -> {
            JFrame frame = new JFrame("AutoFácil - Gráficos e Relatórios");
            frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
            frame.setSize(1000, 700);
            frame.setLocationRelativeTo(null);
            
            JTabbedPane tabbedPane = new JTabbedPane();
            
            // Aba Dashboard
            tabbedPane.addTab("Dashboard", criarDashboard());
            
            // Abas individuais
            tabbedPane.addTab("Status Veículos", criarGraficoPizzaStatusVeiculos());
            tabbedPane.addTab("Veículos por Categoria", criarGraficoBarrasVeiculosPorCategoria());
            tabbedPane.addTab("Aluguéis por Mês", criarGraficoBarrasAluguelsPorMes());
            tabbedPane.addTab("Receita por Categoria", criarGraficoPizzaReceitaPorCategoria());
            
            frame.add(tabbedPane);
            frame.setVisible(true);
        });
    }
}
